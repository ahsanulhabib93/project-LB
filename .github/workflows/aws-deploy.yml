name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Configure AWS CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Build Docker Image (Optional for containerized apps)
    - name: Build Docker Image
      run: |
        docker build -t my-app .

    # Step 4: Push Docker Image to ECR (Optional for ECS)
    - name: Push Docker Image to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin <your_account_id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        docker tag my-app:latest <your_account_id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest
        docker push <your_account_id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest

    # Step 5: Deploy to EC2
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws-key.pem ec2-user@<EC2_IP_ADDRESS> << EOF
          docker pull <your_account_id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest
          docker stop my-app || true
          docker rm my-app || true
          docker run -d -p 8080:8080 --name my-app <your_account_id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app:latest
        EOF
